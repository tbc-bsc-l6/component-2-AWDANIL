<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Component-1</name>
    </assembly>
    <members>
        <member name="M:CustomCircle.#ctor(BOOSE.ICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:CustomCircle"/> class.
            </summary>
            <param name="canvas">The canvas where the circle will be drawn.</param>
        </member>
        <member name="M:CustomCircle.Set(BOOSE.StoredProgram,System.String)">
            <summary>
            Sets the circle command with the specified parameters.
            </summary>
            <param name="program">The stored program to associate with the command.</param>
            <param name="parameters">The parameter string containing radius and optionally filled.</param>
        </member>
        <member name="M:CustomCircle.CheckParameters(System.String[])">
            <summary>
            Validates the parameters for the circle command.
            </summary>
            <param name="parameterList">An array of parameters to validate.</param>
            <exception cref="T:BOOSE.CommandException">Thrown for invalid parameters.</exception>
        </member>
        <member name="M:CustomCircle.Execute">
            <summary>
            Executes the circle command by drawing a circle on the canvas.
            </summary>
            <exception cref="T:BOOSE.CanvasException">Thrown if the canvas is not initialized.</exception>
        </member>
        <member name="M:CustomCircle.ResolveValue(System.String)">
            <summary>
            Resolves a value from the given parameter, either directly or from a variable.
            </summary>
            <param name="parameter">The parameter to resolve.</param>
            <returns>The resolved integer value.</returns>
        </member>
        <member name="M:CustomCircle.IsValueResolvable(System.String)">
            <summary>
            Checks if a parameter can be resolved to a value (literal or variable).
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if resolvable; otherwise, false.</returns>
        </member>
        <member name="T:Component_1.CustomCommandFactory">
            <summary>
            A custom command factory that extends the BOOSE
            Support additional commands like "tri","write".
            </summary>
            <seealso cref="T:BOOSE.CommandFactory" />
        </member>
        <member name="M:Component_1.CustomCommandFactory.#ctor(BOOSE.ICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:Component_1.CustomCommandFactory"/> class.
            </summary>
            <param name="canvas">The <see cref="T:BOOSE.ICanvas"/>object associate with custom commands</param>
        </member>
        <member name="M:Component_1.CustomCommandFactory.MakeCommand(System.String)">
            <summary>
            Makes the new BOOSE command.
            </summary>
            <param name="commandType">Type of the command to create.</param>
            <returns>An <see cref="T:BOOSE.ICommand"/> instance corresponding to the specified command type.</returns>
            <exception cref="T:BOOSE.FactoryException">
            Thrown when an unsupported command type is requested.
            </exception>
        </member>
        <member name="T:Component_1.CustomInt">
            <summary>
            Represents a custom implementation of the BOOSE "int" command with no variable limit.
            </summary>
        </member>
        <member name="M:Component_1.CustomInt.Restrictions">
            <summary>
            Overrides the Restrictions method to bypass variable limit checks.
            </summary>
        </member>
        <member name="T:Component_1.CustomReal">
            <summary>
            Custom implementation of the BOOSE Real type to handle floating-point variables.
            </summary>
        </member>
        <member name="M:Component_1.CustomReal.Restrictions">
            <summary>
            Override restrictions to bypass the variable limit for real variables.
            </summary>
        </member>
        <member name="M:Component_1.CustomReal.Execute">
            <summary>
            Override Execute to add additional validation if needed.
            </summary>
        </member>
        <member name="T:Component_1.CustomRect">
            <summary>
            Represents a custom command to draw a rectangle on the canvas with optional fill.
            </summary>
            <seealso cref="T:BOOSE.Command" />
        </member>
        <member name="M:Component_1.CustomRect.#ctor(BOOSE.ICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:Component_1.CustomRect"/> class with the specified canvas.
            </summary>
            <param name="canvas">The canvas where rectangle will be drawn.</param>
        </member>
        <member name="M:Component_1.CustomRect.Set(BOOSE.StoredProgram,System.String)">
            <summary>
            Sets the command with the specified program and parameter list.
            This method processes the parameters after calling the base implementation.
            </summary>
            <param name="program">The stored program to associate with the command.</param>
            <param name="parameterList">The parameter list for the command.</param>
        </member>
        <member name="M:Component_1.CustomRect.CheckParameters(System.String[])">
            <summary>
            Checks the parameters for Rect command.
            </summary>
            <param name="parameterList">The parameter list.</param>
            <exception cref="T:BOOSE.CommandException">
            Tri requires exactly two parameters: width and height.
            or
            Invalid parameters for Rect. Width and height must be integers.
            </exception>
        </member>
        <member name="M:Component_1.CustomRect.ProcessParameters(System.String)">
            <summary>
            Processes the parameter list to extract the width, height, and fill status.
            </summary>
            <param name="parameterList">The parameter list as a comma-separated string.</param>
        </member>
        <member name="M:Component_1.CustomRect.Execute">
            <summary>
            Executes this rect command.
            </summary>
            <exception cref="T:BOOSE.CanvasException">Canvas not initialized.</exception>
        </member>
        <member name="T:Component_1.CustomWrite">
            <summary>
            Represents a custom command for writing text on the canvas.
            </summary>
        </member>
        <member name="M:Component_1.CustomWrite.#ctor(BOOSE.ICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:Component_1.CustomWrite"/> class.
            </summary>
            <param name="canvas">The canvas where the text will be written.</param>
        </member>
        <member name="M:Component_1.CustomWrite.Set(BOOSE.StoredProgram,System.String)">
            <summary>
            Sets the command with the specified program and parameter list.
            This method processes the parameters after calling the base implementation.
            </summary>
            <param name="program">The stored program to associate with the command.</param>
            <param name="parameterList">The parameter list for the command.</param>
        </member>
        <member name="M:Component_1.CustomWrite.CheckParameters(System.String[])">
            <summary>
            Validates the parameters for the Write command.
            Ensures that at least one parameter is provided.
            </summary>
            <param name="parameterList">An array of parameters to validate.</param>
            <exception cref="T:BOOSE.CommandException">
            Thrown if the number of parameters is invalid.
            </exception>
        </member>
        <member name="M:Component_1.CustomWrite.ProcessParameters(System.String)">
            <summary>
            Processes the parameters for the Write command.
            Trims any enclosing quotes from the provided text.
            </summary>
            <param name="parameterList">The parameter list as a single string.</param>
        </member>
        <member name="M:Component_1.CustomWrite.Execute">
            <summary>
            Executes the Write command by writing the specified text to the canvas.
            </summary>
            <exception cref="T:BOOSE.CanvasException">
            Thrown if the canvas is not initialized.
            </exception>
        </member>
        <member name="T:Component_1.Form1">
            <summary>
            Represent main form and provides user interface
            for executing BOOSE and displaying output
            </summary>
        </member>
        <member name="F:Component_1.Form1._program">
            <summary>
            The StoredProgram object is responsible for managing and executing commands.
            </summary>
        </member>
        <member name="F:Component_1.Form1._parser">
            <summary>
            The parser object for parsing BOOSE commands.
            </summary>
        </member>
        <member name="F:Component_1.Form1._canvas">
            <summary>
            The canvaswrapper responsible for drawing the output of commands.
            </summary>
        </member>
        <member name="F:Component_1.Form1._commands">
            <summary>
            List of all commands available in BOOSE and custom commands.
            </summary>
        </member>
        <member name="M:Component_1.Form1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Component_1.Form1"/> class.
            Sets up the canvas,parser and program components.
            </summary>
        </member>
        <member name="M:Component_1.Form1.InitializeCommandList">
            <summary>
            Initializes the list of all available commands in BOOSE and custom commands.
            </summary>
        </member>
        <member name="M:Component_1.Form1.btn_Run_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btn_Run control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref = "T:BOOSE.ParserException" > Thrown when there is a syntax error in the script.</exception>
            <exception cref="T:BOOSE.StoredProgramException">Thrown when there is a runtime error in the script.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs during execution.</exception>
        </member>
        <member name="M:Component_1.Form1.btn_Clear_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btn_Clear control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Component_1.Form1.btn_Reset_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btn_Reset control.
            Resets the canvas, command text box, console, and initializes default states.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Component_1.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Component_1.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Component_1.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Component_1.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
        <member name="T:Component_1.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Component_1.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Component_1.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Component_1.Tri">
            <summary>
            Represent a command to draw a triangle on the canvas.
            </summary>
            <seealso cref="T:BOOSE.CanvasCommand" />
            <seealso cref="T:BOOSE.ICommand" />
        </member>
        <member name="M:Component_1.Tri.#ctor(BOOSE.ICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:Component_1.Tri"/> class.
            </summary>
            <param name="canvas">The canvas where the ttriangle will be drawn.</param>
        </member>
        <member name="M:Component_1.Tri.CheckParameters(System.String[])">
            <summary>
            Checks the parameters for Tri command.
            </summary>
            <param name="parameterList">The parameter list.</param>
            <exception cref="T:BOOSE.CommandException">
            Tri requires exactly two parameters: width and height.
            or
            Invalid parameters for Tri. Width and height must be integers.
            </exception>
        </member>
        <member name="M:Component_1.Tri.Compile">
            <summary>
            Compiles the command by processing its parameters.
            </summary>
        </member>
        <member name="M:Component_1.Tri.Execute">
            <summary>
            Executes the Tri command to draw a triangle on the canvas.
            </summary>
            <exception cref="T:BOOSE.CanvasException">Canvas not initialized</exception>
        </member>
        <member name="T:Component_1.ApplicationConfiguration">
            <summary>
             Bootstrap the application configuration.
            </summary>
        </member>
        <member name="M:Component_1.ApplicationConfiguration.Initialize">
            <summary>
             Bootstrap the application as follows:
             <code>
             global::System.Windows.Forms.Application.EnableVisualStyles();
             global::System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);
             global::System.Windows.Forms.Application.SetHighDpiMode(HighDpiMode.SystemAware);
            </code>
            </summary>
        </member>
    </members>
</doc>
